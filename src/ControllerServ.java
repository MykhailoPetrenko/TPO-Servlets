import javax.servlet.RequestDispatcher;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.util.List;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;public class ControllerServ extends HttpServlet {    private ServletContext context;    private Command command;            // obiekt klasy wykonawczej    private String presentationServ;    // nazwa serwlet prezentacji    private String getParamsServ;       // mazwa serwletu pobierania parametrów    private Object lock = new Object(); // semafor dla synchronizacji    // odwołań wielu wątków    public void init() {        context = getServletContext();        presentationServ = context.getInitParameter("presentationServ");        getParamsServ = context.getInitParameter("getParamsServ");        String commandClassName = context.getInitParameter("commandClassName");        // Załadowanie klasy Command i utworzenie jej egzemplarza        // który będzie wykonywał pracę        try {            Class commandClass = Class.forName(commandClassName);            command = (Command) commandClass.newInstance();        } catch (Exception exc) {           exc.printStackTrace();        }    }    // Obsługa zleceń    public void serviceRequest(HttpServletRequest req,                               HttpServletResponse resp)            throws ServletException, IOException    {        resp.setContentType("text/html");        RequestDispatcher disp = context.getRequestDispatcher(getParamsServ);        disp.include(req,resp);        HttpSession ses = req.getSession();        String[] pnames = BundleInfo.getCommandParamNames();        for (int i=0; i<pnames.length; i++) {            String pval = (String) ses.getAttribute("param_"+pnames[i]);            if (pval == null) return;  // jeszcze nie ma parametrów            command.setParameter(pnames[i], pval);        }        Lock mainLock = new ReentrantLock();        mainLock.lock();        command.execute();        List results = (List) command.getResults();        ses.setAttribute("StatusCode", new Integer(command.getStatusCode()));        ses.setAttribute("Results", results);        ses.setAttribute("Lock", mainLock);    // zapiszmy lock, aby mozna go było otworzyć później        disp = context.getRequestDispatcher(presentationServ);        disp.forward(req, resp);    }    public void doGet(HttpServletRequest request,                      HttpServletResponse response)            throws ServletException, IOException    {        serviceRequest(request, response);    }    public void doPost(HttpServletRequest request,                       HttpServletResponse response)            throws ServletException, IOException    {        serviceRequest(request, response);    }}